/* Copyright (c) 2010 David McKeone
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* NON-VISUAL OBJECT BASE (IMPLEMENTATION)
 * 
 * Base class for all Non-Visual objects based Omnis objects
 *
 * March 30, 2010 David McKeone (Created)
 */

#include <extcomp.he>
#include "NVObjTemplate.he"
#include "OmnisTools.he"

#ifndef NV_OBJ_BASE_HE_
#define NV_OBJ_BASE_HE_

// Class definition for C++ version of your object
class NVObjBase
{
private:
protected:
	qobjinst			mObjInst;
public:
	// Static tracking variable
	static qshort objResourceId;  // This static variable needs to be in all inherited objects
	
	// Constructor / Destructor
	NVObjBase( qobjinst objinst );
	virtual ~NVObjBase();
	
	// Object Copying
	NVObjBase* dup( qlong propID, qobjinst objinst, OmnisTools::tThreadData *pThreadData );
	virtual void copy( NVObjBase* pObj );
		
	// Methods Available and Method Call Handling (These should be overriden by a sub-class)
	virtual qlong returnMethods( OmnisTools::tThreadData* );
	virtual qlong methodCall( OmnisTools::tThreadData* );

	// Properties and Property Call Handling (These should be overriden by a sub-class)
	virtual qlong returnProperties( OmnisTools::tThreadData* );
	virtual qlong getProperty( OmnisTools::tThreadData* );
	virtual qlong setProperty( OmnisTools::tThreadData* );
	virtual qlong canAssignProperty( OmnisTools::tThreadData*, qlong propID );
};

#endif /* NV_OBJ_BASE_HE_ */
