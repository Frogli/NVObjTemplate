/* Copyright (c) 2010 David McKeone
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* OMNIS TOOLS (HEADER)
 * 
 * This is a colleciton of tools for creating omnis components
 *
 * NOTE: All headers for external components must have the .he extension instead of the standard .h
 *       To enable code-highliting in Visual Studio 2008 go to Tools->Options-Text Editor-File Extension 
 *       and add "he" as a "Microsoft Visual C++" experience.
 *
 * October 4, 2010 David McKeone (Created)
 */

//Omnis includes
#include <extcomp.he>
#include <chrbasic.he>

//Std Library includes
#include <string>

#ifndef OMNIS_TOOLS_HE_
#define OMNIS_TOOLS_HE_

#ifdef ismac
#undef QTEXT
#define C_TEXT(_a)	((qoschar *) (L ## _a))
#else
#define C_TEXT			QTEXT
#endif

namespace OmnisTools {
	
	// Generic result type for returning error status
	typedef qlong tResult;
	
	// Thread data struct is an ease-of-use tool to keep track of the current context, 
	// rather than just passing eci everywhere
	struct tThreadData 
	{
		tThreadData( EXTCompInfo* pEci ) { mEci = pEci, mCurMethodName = ""; mExtraErrorText = ""; }
		
		EXTCompInfo* mEci;
		std::string mCurMethodName;
		std::string mExtraErrorText;
	}; 
	
	// Parameter helpers
	qbool getParamVar( tThreadData* pThreadData, qshort pParamNum, EXTfldval& pOutVar );
	qbool getParamVar( EXTCompInfo* pEci, qshort pParamNum, EXTfldval& pOutVar );
	
	// qbool/bool helpers
	qbool getQBoolFromBool(bool);
	bool getBoolFromQBool(qbool);
	
	// std::wstring/EXTfldval helpers
	std::wstring getWStringFromEXTFldVal(EXTfldval& fVal);
	void getEXTFldValFromWString(EXTfldval&, const std::wstring);
	
	// std::string/EXTfldval helpers
	std::string getStringFromEXTFldVal(EXTfldval&);
	void getEXTFldValFromString(EXTfldval&, const std::string);
	
	// std::string/qchar* helpers
	qchar* getQCharFromString( const std::string readString, qlong &retLength );
	qchar* getQCharFromWString( const std::wstring readString, qlong &retLength );
	
	// get ISO 8601 std::string from Date
	std::string getISO8601DateStringFromEXTFldVal(EXTfldval&);
	
	// ************ TEMPLATES ************ //
	
	// Generic method for retrieving an object by it's instance
	template <class T>
	T* getObjForInstance(tThreadData* pThreadData, qobjinst objinst) {
		LPARAM objinstPtr = reinterpret_cast<LPARAM>(objinst);
		void* omnisPtr = ECOfindNVObject(pThreadData->mEci->mOmnisInstance, objinstPtr);
		T* retPtr = reinterpret_cast<T*>( omnisPtr );
		return retPtr;
	}
	
	// Generic method for retrieving an object from it's EXTfldval
	template <class T>
	T* getObjForEXTfldval(tThreadData* pThreadData, EXTfldval &fVal) {
		qobjinst objinst = fVal.getObjInst(qfalse);
		
		return getObjForInstance<T>(pThreadData, objinst);
	}
	
	// Generic method for creating a new object in the Omnis pool
	template <class T>
	T* createNVObj(qshort objectType, tThreadData* pThreadData) {
		qlong saveCompId = pThreadData->mEci->mCompId;  // Save the current comp ID
		
		pThreadData->mEci->mCompId = objectType; // Set the comp ID for the NEW object
		qobjinst newObjInst = EXTobjinst( pThreadData->mEci );  // Create the new object (this calls ECM_OBJCONSTRUCT)
		
		pThreadData->mEci->mCompId = saveCompId; // Restore the saved comp ID
		
		T* nvObj = getObjForInstance<T>(pThreadData, newObjInst); // Locate the newly created object pointer
		
		return nvObj;
	}
	
	// Generic method creating a new object in the Omnis pool from just the object
	// Requires that T has the static member objResourceId set. (See NVObjBase)
	template <class T>
	T* createNVObj(tThreadData* pThreadData) {
		qshort objectType = T::objResourceId;
		
		return createNVObj<T>(objectType, pThreadData);
	}
}
	
#endif OMNIS_TOOLS_HE_
